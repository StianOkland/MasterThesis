{"ast":null,"code":"import Automerge, { Connection } from 'automerge';\nimport io from 'socket.io-client';\nexport const docSet = new Automerge.DocSet();\nexport let socket = null;\nexport const docarray = [];\nexport default function getConnected(callback) {\n  socket = io(\"http://localhost:3000\");\n  socket.on('data', ({\n    data,\n    name\n  }) => {\n    let doc = docSet.getDoc(name);\n    doc = Automerge.change(doc, doc => {\n      doc.chards = ['hei'];\n    });\n    docSet.setDoc(name, doc);\n  });\n  socket.on('add doc web', ({\n    title,\n    change\n  }) => {\n    const initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = title, doc.cards = [];\n    });\n    let changes = JSON.parse(change);\n    const doc = Automerge.applyChanges(initDoc, changes);\n    docSet.setDoc(title, doc);\n    setState(docarray, Array.from(docSet.docs));\n  });\n  socket.on('close', () => {\n    console.log(`[${HOST}:${PORT}] connection closed`);\n  });\n  socket.on('error', err => {\n    console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n  });\n  socket.on('add card web', async ({\n    name,\n    change\n  }) => {\n    const doc = docSet.getDoc(name);\n    let changes = JSON.parse(change);\n    doc2 = Automerge.applyChanges(doc, changes);\n    docSet.setDoc(name, doc2);\n  });\n  socket.on('add doc new doc', ({\n    name,\n    change\n  }) => {\n    let initDoc = Automerge.init();\n    let doc1 = Automerge.change(initDoc, doc => {\n      doc.title = name, doc.cards = [];\n    });\n    let changes = JSON.parse(change);\n    const doc = Automerge.applyChanges(doc1, changes);\n    docSet.setDoc(doc.title, doc);\n    docarray = Array.from(docSet.docs);\n  });\n  socket.on('add doc new card', async ({\n    name,\n    change\n  }) => {\n    const doc = docSet.getDoc(name);\n\n    if (doc) {\n      let changes = JSON.parse(change);\n      const doc2 = Automerge.applyChanges(doc, changes);\n      docSet.setDoc(doc2.title, doc2);\n      docarray = Array.from(docSet.docs);\n    }\n  });\n}","map":{"version":3,"sources":["/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/common.js"],"names":["Automerge","Connection","io","docSet","DocSet","socket","docarray","getConnected","callback","on","data","name","doc","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","JSON","parse","applyChanges","setState","Array","from","docs","console","log","HOST","PORT","err","remoteAddress","remotePort","doc2","doc1"],"mappings":"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","sourcesContent":["import Automerge, { Connection } from 'automerge'\nimport io from 'socket.io-client'\nexport const docSet = new Automerge.DocSet()\n\nexport let socket = null;\nexport const docarray = [];\n\nexport default function getConnected( callback ) {\n    socket = io(\"http://localhost:3000\")\n\n    socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    socket.on('add doc web',  ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        setState(docarray , Array.from(docSet.docs))\n    })\n\n    socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    socket.on('add card web', async ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    socket.on('add doc new doc',  ({name, change}) => {\n        let initDoc = Automerge.init()\n        let doc1 = Automerge.change(initDoc, doc => {doc.title = name, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(doc1, changes)\n        docSet.setDoc(doc.title, doc)\n        docarray = Array.from(docSet.docs)\n    })\n\n    socket.on('add doc new card', async ({name, change}) => {\n      const doc = docSet.getDoc(name)\n      if (doc) {\n          let changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(doc2.title, doc2)\n          docarray = Array.from(docSet.docs)\n      }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}