{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js\";\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nconst docSet = new Automerge.DocSet();\ndocSet.registerHandler((docId, doc) => {\n  console.log(`[${docId}] ${JSON.stringify(doc)}`);\n});\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: 'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0\n    };\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleQuestionTitle = this.handleQuestionTitle.bind(this);\n    this.handleQuestionAnswer = this.handleQuestionAnswer.bind(this);\n    this.handleQuestionNumber = this.handleQuestionNumber.bind(this);\n    this.addDoc = this.addDoc.bind(this);\n    this.deleteDoc = this.deleteDoc.bind(this);\n    this.addQ = this.addQ.bind(this);\n    this.addA = this.addA.bind(this);\n  } // componentDidMount() {\n  //   this.socket = io(\"http://localhost:3000\")\n  //   this.socket.on('data', ({data, name}) => {\n  //       let doc = docSet.getDoc(name)\n  //       doc = Automerge.change(doc, doc => {\n  //         doc.chards = ['hei']\n  //       })\n  //       docSet.setDoc(name, doc)\n  //   })\n  //   this.socket.on('add doc web', async ({title, change}) => {\n  //       const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n  //       let changes = JSON.parse(change)\n  //       const doc = Automerge.applyChanges(initDoc, changes)\n  //       docSet.setDoc(title, doc)\n  //       this.state.docarray = Array.from(docSet.docs)\n  //   })\n  //   this.socket.on('close', () => {\n  //       console.log(`[${HOST}:${PORT}] connection closed`)\n  //   })\n  //   this.socket.on('error', (err) => {\n  //       console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n  //   })\n  //   this.socket.on('add card web', async ({name, change}) => {\n  //       const doc = docSet.getDoc(name)\n  //       let changes = JSON.parse(change)\n  //       doc2 = Automerge.applyChanges(doc, changes)\n  //       docSet.setDoc(name, doc2)\n  //   })\n  //   this.socket.on('add doc new doc',  ({name, change}) => {\n  //       let initDoc = Automerge.init()\n  //       let doc1 = Automerge.change(initDoc, doc => {doc.title = name, doc.cards = []})\n  //       let changes = JSON.parse(change)\n  //       const doc = Automerge.applyChanges(doc1, changes)\n  //       docSet.setDoc(doc.title, doc)\n  //       this.setState({docarray : Array.from(docSet.docs)})\n  //   })\n  //   this.socket.on('add doc new card', async ({name, change}) => {\n  //     const doc = docSet.getDoc(name)\n  //     if (doc) {\n  //         let changes = JSON.parse(change)\n  //         const doc2 = Automerge.applyChanges(doc, changes)\n  //         docSet.setDoc(doc2.title, doc2)\n  //         this.setState({docarray : Array.from(docSet.docs)})\n  //     }\n  //   })\n  // }\n\n\n  handleChangeName(e) {\n    this.setState({\n      docname: e.target.value\n    });\n  }\n\n  handleQuestionTitle(e) {\n    this.setState({\n      question: e.target.value\n    });\n  }\n\n  handleQuestionAnswer(e) {\n    this.setState({\n      answer: e.target.value\n    });\n  }\n\n  handleQuestionNumber(e) {\n    this.setState({\n      questionNumber: e.target.value\n    });\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = this.state.docname, doc.cards = [];\n    });\n    docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n    let changes = Automerge.getAllChanges(initDoc);\n    this.socket.emit(\"add doc\", {\n      title: this.state.docname,\n      change: JSON.stringify(changes)\n    });\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc(this.state.docname);\n\n    if (doc) {\n      docSet.removeDoc(this.state.docname);\n    }\n\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  addQ() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc(this.state.docname);\n\n    if (doc1) {\n      const doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({\n          id: id,\n          Question: this.state.question,\n          Answers: []\n        });\n      });\n      docSet.setDoc(this.state.docname, doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      const changes = Automerge.getAllChanges(doc2);\n      this.socket.emit(\"add question\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }\n\n  addA() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc(this.state.docname);\n\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards[this.state.questionNumber]['Answer'].push({\n          id: id,\n          a: this.state.answer\n        });\n      });\n      docSet.setDoc(this.state.docname, doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      this.socket.emit(\"add question\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Toohak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Toohak!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addDoc,\n        value: \"Add a new document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.deleteDoc,\n        value: \"Delete a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addQ,\n        value: \"Add a question to a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleQuestionNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addA,\n        value: \"Answer a question in a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Documents: \", JSON.stringify(this.state.docarray, null, 2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","init","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","Home","Component","constructor","props","state","data","results","docarray","docname","question","answer","questionNumber","handleChangeName","bind","handleQuestionTitle","handleQuestionAnswer","handleQuestionNumber","addDoc","deleteDoc","addQ","addA","e","setState","target","value","initDoc","change","title","cards","setDoc","Array","from","docs","changes","getAllChanges","socket","emit","getDoc","removeDoc","id","v4","doc1","doc2","push","Question","Answers","a","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\n\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0\n    }\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleQuestionTitle = this.handleQuestionTitle.bind(this)\n    this.handleQuestionAnswer = this.handleQuestionAnswer.bind(this)\n    this.handleQuestionNumber = this.handleQuestionNumber.bind(this)\n    this.addDoc = this.addDoc.bind(this)\n    this.deleteDoc = this.deleteDoc.bind(this)\n    this.addQ = this.addQ.bind(this)\n    this.addA = this.addA.bind(this)\n  }\n\n\n  // componentDidMount() {\n  //   this.socket = io(\"http://localhost:3000\")\n\n  //   this.socket.on('data', ({data, name}) => {\n  //       let doc = docSet.getDoc(name)\n  //       doc = Automerge.change(doc, doc => {\n  //         doc.chards = ['hei']\n  //       })\n  //       docSet.setDoc(name, doc)\n  //   })\n      \n  //   this.socket.on('add doc web', async ({title, change}) => {\n  //       const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n  //       let changes = JSON.parse(change)\n\n  //       const doc = Automerge.applyChanges(initDoc, changes)\n  //       docSet.setDoc(title, doc)\n  //       this.state.docarray = Array.from(docSet.docs)\n  //   })\n\n  //   this.socket.on('close', () => {\n  //       console.log(`[${HOST}:${PORT}] connection closed`)\n  //   })\n\n  //   this.socket.on('error', (err) => {\n  //       console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n  //   })\n\n  //   this.socket.on('add card web', async ({name, change}) => {\n  //       const doc = docSet.getDoc(name)\n  //       let changes = JSON.parse(change)\n  //       doc2 = Automerge.applyChanges(doc, changes)\n  //       docSet.setDoc(name, doc2)\n  //   })\n\n  //   this.socket.on('add doc new doc',  ({name, change}) => {\n  //       let initDoc = Automerge.init()\n  //       let doc1 = Automerge.change(initDoc, doc => {doc.title = name, doc.cards = []})\n  //       let changes = JSON.parse(change)\n\n  //       const doc = Automerge.applyChanges(doc1, changes)\n  //       docSet.setDoc(doc.title, doc)\n  //       this.setState({docarray : Array.from(docSet.docs)})\n  //   })\n\n  //   this.socket.on('add doc new card', async ({name, change}) => {\n  //     const doc = docSet.getDoc(name)\n  //     if (doc) {\n  //         let changes = JSON.parse(change)\n  //         const doc2 = Automerge.applyChanges(doc, changes)\n  //         docSet.setDoc(doc2.title, doc2)\n  //         this.setState({docarray : Array.from(docSet.docs)})\n  //     }\n  //   })\n  // }\n\n \n  handleChangeName(e) {\n    this.setState({docname: e.target.value})\n  }\n  handleQuestionTitle(e) {\n    this.setState({question: e.target.value})\n  }\n  handleQuestionAnswer(e) {\n    this.setState({answer: e.target.value})\n  }\n  handleQuestionNumber(e) {\n    this.setState({questionNumber: e.target.value})\n  }\n  \n  \n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = this.state.docname, doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n    \n    let changes = Automerge.getAllChanges(initDoc)\n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc(this.state.docname)\n    if (doc) {\n        docSet.removeDoc(this.state.docname)\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      const doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, Question: this.state.question, Answers: []})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      const changes = Automerge.getAllChanges(doc2)\n\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  addA() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards[this.state.questionNumber]['Answer'].push({id: id, a: this.state.answer})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        \n        \n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.addDoc}\n          value='Add a new document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.deleteDoc}\n          value='Delete a document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='text' onChange={this.handleQuestionTitle}/>\n        \n        <input \n          type='button'\n          onClick={this.addQ}\n          value='Add a question to a document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='text' onChange={this.handleQuestionTitle}/>\n        <input type='number' onChange={this.handleQuestionNumber}/>\n        <input type='text' onChange={this.handleQuestionAnswer}/>\n\n\n        \n        <input \n          type='button'\n          onClick={this.addA}\n          value='Answer a question in a document'\n        />\n     \n\n        <pre>Documents: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}