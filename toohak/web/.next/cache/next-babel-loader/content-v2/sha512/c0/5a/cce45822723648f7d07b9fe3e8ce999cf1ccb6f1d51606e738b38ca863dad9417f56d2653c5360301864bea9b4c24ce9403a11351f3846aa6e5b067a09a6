{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js\";\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client'; // import conn ,{ docSet, socket, docarray } from './common'\n// docSet.registerHandler((docId, doc) => {\n//     console.log(`[${docId}] ${JSON.stringify(doc)}`)\n// })\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docarray: [],\n      docname: 'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0,\n      address: null,\n      isConnected: '',\n      docSet: null\n    };\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleQuestionTitle = this.handleQuestionTitle.bind(this);\n    this.handleQuestionAnswer = this.handleQuestionAnswer.bind(this);\n    this.handleQuestionNumber = this.handleQuestionNumber.bind(this);\n    this.addDoc = this.addDoc.bind(this);\n    this.deleteDoc = this.deleteDoc.bind(this);\n    this.addQ = this.addQ.bind(this);\n    this.addA = this.addA.bind(this);\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:3000\");\n    this.setState({\n      docSet: new Automerge.DocSet()\n    });\n    this.socket.on('data', ({\n      data,\n      name\n    }) => {\n      let doc = docSet.getDoc(name);\n      doc = Automerge.change(doc, doc => {\n        doc.chards = ['hei'];\n      });\n      docSet.setDoc(name, doc);\n    });\n    this.socket.on('add doc web', async ({\n      title,\n      change\n    }) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = title, doc.cards = [];\n      });\n      let changes = JSON.parse(change);\n      const doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc(title, doc);\n      this.state.docarray = Array.from(docSet.docs);\n    });\n    this.socket.on('close', () => {\n      console.log(`[${HOST}:${PORT}] connection closed`);\n    });\n    this.socket.on('error', err => {\n      console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n    });\n    this.socket.on('add card web', async ({\n      name,\n      change\n    }) => {\n      const doc = docSet.getDoc(name);\n      let changes = JSON.parse(change);\n      doc2 = Automerge.applyChanges(doc, changes);\n      docSet.setDoc(name, doc2);\n    });\n    this.socket.on('add doc new doc', async ({\n      title,\n      change\n    }) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = title, doc.cards = [];\n      });\n      const changes = JSON.parse(change);\n      const doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc(title, doc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    });\n    this.socket.on('add doc new card', async ({\n      title,\n      change\n    }) => {\n      const doc = docSet.getDoc(title);\n\n      if (doc) {\n        const changes = JSON.parse(change);\n        const doc2 = Automerge.applyChanges(doc, changes);\n        docSet.setDoc(title, doc2);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n      }\n    });\n  }\n\n  handleChangeName(e) {\n    this.setState({\n      docname: e.target.value\n    });\n  }\n\n  handleQuestionTitle(e) {\n    this.setState({\n      question: e.target.value\n    });\n  }\n\n  handleQuestionAnswer(e) {\n    this.setState({\n      answer: e.target.value\n    });\n  }\n\n  handleQuestionNumber(e) {\n    this.setState({\n      questionNumber: e.target.value\n    });\n  }\n\n  addDoc() {\n    const initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = this.state.docname, doc.cards = [];\n    });\n    this.docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(this.docSet.docs)\n    });\n    const changes = Automerge.getAllChanges(initDoc);\n    this.socket.emit(\"add doc\", {\n      title: this.state.docname,\n      change: JSON.stringify(changes)\n    });\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc(this.state.docname);\n\n    if (doc) {\n      docSet.removeDoc(this.state.docname);\n    }\n\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  addQ() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc(this.state.docname);\n\n    if (doc1) {\n      const doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({\n          id: id,\n          Question: this.state.question,\n          Answers: []\n        });\n      });\n      docSet.setDoc(this.state.docname, doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      const changes = Automerge.getAllChanges(doc2);\n      this.socket.emit(\"add question\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }\n\n  addA() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc(this.state.docname);\n\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards[this.state.questionNumber]['Answers'].push({\n          id: id,\n          a: this.state.answer\n        });\n      });\n      docSet.setDoc(this.state.docname, doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      const changes = Automerge.getAllChanges(doc2);\n      this.socket.emit(\"add question\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Toohak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Toohak!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addDoc,\n        value: \"Add a new document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.deleteDoc,\n        value: \"Delete a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addQ,\n        value: \"Add a question to a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChangeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: this.handleQuestionNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleQuestionAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: this.addA,\n        value: \"Answer a question in a document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Documents: \", JSON.stringify(this.state.docarray, null, 2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","init","Head","io","Home","Component","constructor","props","state","docarray","docname","question","answer","questionNumber","address","isConnected","docSet","handleChangeName","bind","handleQuestionTitle","handleQuestionAnswer","handleQuestionNumber","addDoc","deleteDoc","addQ","addA","componentDidMount","socket","setState","DocSet","on","data","name","doc","getDoc","change","chards","setDoc","title","initDoc","cards","changes","JSON","parse","applyChanges","Array","from","docs","console","log","HOST","PORT","err","remoteAddress","remotePort","doc2","e","target","value","getAllChanges","emit","stringify","removeDoc","id","v4","doc1","push","Question","Answers","a","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\n// import conn ,{ docSet, socket, docarray } from './common'\n\n\n\n\n\n// docSet.registerHandler((docId, doc) => {\n//     console.log(`[${docId}] ${JSON.stringify(doc)}`)\n// })\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      docarray: [],\n      docname:'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0,\n      address: null,\n      isConnected: '',\n      docSet : null\n    }\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleQuestionTitle = this.handleQuestionTitle.bind(this)\n    this.handleQuestionAnswer = this.handleQuestionAnswer.bind(this)\n    this.handleQuestionNumber = this.handleQuestionNumber.bind(this)\n    this.addDoc = this.addDoc.bind(this)\n    this.deleteDoc = this.deleteDoc.bind(this)\n    this.addQ = this.addQ.bind(this)\n    this.addA = this.addA.bind(this)\n  }\n\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:3000\")\n    this.setState({ docSet : new Automerge.DocSet()}) \n\n\n    this.socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    this.socket.on('add doc web', async ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        this.state.docarray = Array.from(docSet.docs)\n    })\n\n    this.socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    this.socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    this.socket.on('add card web', async ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    this.socket.on('add doc new doc',  async ({title, change}) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n      const changes = JSON.parse(change)\n\n\n      const doc = Automerge.applyChanges(initDoc, changes)\n      docSet.setDoc(title, doc)\n      this.setState({docarray : Array.from(docSet.docs)})\n    })\n\n    this.socket.on('add doc new card', async ({title, change}) => {\n      const doc = docSet.getDoc(title)\n      if (doc) {\n          const changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n  }\n\n\n  handleChangeName(e) {\n    this.setState({docname: e.target.value})\n  }\n  handleQuestionTitle(e) {\n    this.setState({question: e.target.value})\n  }\n  handleQuestionAnswer(e) {\n    this.setState({answer: e.target.value})\n  }\n  handleQuestionNumber(e) {\n    this.setState({questionNumber: e.target.value})\n  }\n  \n  \n  addDoc() {\n    const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = this.state.docname, doc.cards = []})\n    this.docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(this.docSet.docs)})\n    \n    const changes = Automerge.getAllChanges(initDoc)\n    \n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n    \n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc(this.state.docname)\n    if (doc) {\n        docSet.removeDoc(this.state.docname)\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      const doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, Question: this.state.question, Answers: []})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      const changes = Automerge.getAllChanges(doc2)\n\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  addA() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards[this.state.questionNumber]['Answers'].push({id: id, a: this.state.answer})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      const changes = Automerge.getAllChanges(doc2)\n\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        \n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.addDoc}\n          value='Add a new document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.deleteDoc}\n          value='Delete a document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='text' onChange={this.handleQuestionTitle}/>\n        \n        <input \n          type='button'\n          onClick={this.addQ}\n          value='Add a question to a document'\n        />\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='text' onChange={this.handleQuestionTitle}/>\n        <input type='number' onChange={this.handleQuestionNumber}/>\n        <input type='text' onChange={this.handleQuestionAnswer}/>\n\n\n        \n        <input \n          type='button'\n          onClick={this.addA}\n          value='Answer a question in a document'\n        />\n     \n\n        <pre>Documents: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}