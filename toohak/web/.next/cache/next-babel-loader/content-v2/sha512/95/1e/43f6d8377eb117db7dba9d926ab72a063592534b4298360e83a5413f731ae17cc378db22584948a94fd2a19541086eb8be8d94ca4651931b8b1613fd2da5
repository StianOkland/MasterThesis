{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nvar docSet = new Automerge.DocSet();\ndocSet.registerHandler(function (docId, doc) {\n  console.log(\"[\".concat(docId, \"] \").concat(JSON.stringify(doc)));\n});\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: 'testdoc'\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.socket = io(\"http://localhost:3000\");\n      this.socket.on('data', function (_ref) {\n        var data = _ref.data,\n            name = _ref.name;\n        var doc = docSet.getDoc(name);\n        doc = Automerge.change(doc, function (doc) {\n          doc.chards = ['hei'];\n        });\n        docSet.setDoc(name, doc);\n      });\n      this.socket.on('add doc web', function (_ref2) {\n        var title = _ref2.title,\n            change = _ref2.change;\n        var initDoc = Automerge.change(Automerge.init(), function (doc) {\n          doc.title = title, doc.cards = [];\n        });\n        var changes = JSON.parse(change);\n        var doc = Automerge.applyChanges(initDoc, changes);\n        docSet.setDoc(title, doc);\n        _this2.state.docarray = Array.from(docSet.docs);\n      });\n      this.socket.on('close', function () {\n        console.log(\"[\".concat(HOST, \":\").concat(PORT, \"] connection closed\"));\n      });\n      this.socket.on('error', function (err) {\n        console.log(\"[\".concat(socket.remoteAddress, \":\").concat(socket.remotePort, \"] error: \").concat(err));\n      });\n      this.socket.on('add card web', function (_ref3) {\n        var name = _ref3.name,\n            change = _ref3.change;\n        var doc = docSet.getDoc(name);\n        var changes = JSON.parse(change);\n        doc2 = Automerge.applyChanges(doc, changes);\n        docSet.setDoc(name, doc2);\n      });\n      this.socket.on('add doc new doc', function (_ref4) {\n        var name = _ref4.name,\n            change = _ref4.change;\n        var initDoc = Automerge.change(Automerge.init(), function (doc) {\n          doc.title = '', doc.cards = [];\n        });\n        var changes = JSON.parse(change);\n        var doc = Automerge.applyChanges(initDoc, changes);\n        docSet.setDoc(doc.title, doc);\n\n        _this2.setState({\n          docarray: Array.from(docSet.docs)\n        });\n      });\n      this.socket.on('add doc new card', function (_ref5) {\n        var name = _ref5.name,\n            change = _ref5.change;\n        var doc = docSet.getDoc(toString(name));\n\n        if (doc) {\n          var changes = JSON.parse(change);\n\n          var _doc = Automerge.applyChanges(doc, changes);\n\n          docSet.setDoc(_doc.title, _doc);\n\n          _this2.setState({\n            docarray: Array.from(docSet.docs)\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleClik\",\n    value: function handleClik() {\n      var _this3 = this;\n\n      var tmp = this.state.docname;\n      var initDoc = Automerge.change(Automerge.init(), function (doc) {\n        doc.title = _this3.state.docname, doc.cards = [];\n      });\n      docSet.setDoc(tmp, initDoc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      var changes = Automerge.getAllChanges(initDoc);\n      this.socket.emit(\"add doc\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }, {\n    key: \"addDoc\",\n    value: function addDoc() {\n      var initDoc = Automerge.change(Automerge.init(), function (doc) {\n        doc.title = 'testDoc', doc.cards = [];\n      });\n      docSet.setDoc(this.state.docname, initDoc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      var changes = Automerge.getAllChanges(initDoc);\n      this.socket.emit(\"add doc\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }, {\n    key: \"deleteDoc\",\n    value: function deleteDoc() {\n      var doc = docSet.getDoc('testdoc');\n\n      if (doc) {\n        docSet.removeDoc('testdoc');\n        console.log('doc deleted: testdoc');\n      }\n\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }, {\n    key: \"addQ\",\n    value: function addQ() {\n      var id = uuid.v4();\n      var doc1 = docSet.getDoc('testdoc');\n\n      if (doc1) {\n        var _doc2 = Automerge.change(doc1, function (doc) {\n          doc.cards.push({\n            id: id,\n            q: 'Number 2?',\n            a: []\n          });\n        });\n\n        docSet.setDoc('testdoc', _doc2);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Toohak\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Toohak!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this4.addDoc();\n          },\n          children: \"add document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this4.deleteDoc();\n          },\n          children: \"delete document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this4.addQ();\n          },\n          children: \"add question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"add_document\",\n          autoComplete: \"off\",\n          onChange: function onChange(name) {\n            return _this4.setState({\n              docname: toString(name)\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this4.handleClik();\n          },\n          children: \"add document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 116\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"Results: \", JSON.stringify(this.state.docarray, null, 2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","Home","props","state","data","results","docarray","docname","socket","on","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","setState","toString","tmp","getAllChanges","emit","removeDoc","id","v4","doc1","push","q","a","addDoc","deleteDoc","addQ","handleClik","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\n\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:'testdoc'\n    }\n  }\n\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:3000\")\n\n    this.socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    this.socket.on('add doc web', ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        this.state.docarray = Array.from(docSet.docs)\n    })\n\n    this.socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    this.socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    this.socket.on('add card web', ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    this.socket.on('add doc new doc', ({name, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = '', doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(doc.title, doc)\n        this.setState({docarray : Array.from(docSet.docs)})\n\n    })\n\n    this.socket.on('add doc new card', ({name, change}) => {\n      const doc = docSet.getDoc(toString(name))\n      if (doc) {\n          let changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(doc2.title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n  }\n\n \n  handleClik() {\n    let tmp = this.state.docname\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = this.state.docname, doc.cards = []})\n    docSet.setDoc(tmp, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n\n    let changes = Automerge.getAllChanges(initDoc)\n\n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'testDoc', doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n\n    let changes = Automerge.getAllChanges(initDoc)\n\n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc')\n    if (doc) {\n        docSet.removeDoc('testdoc')\n        console.log('doc deleted: testdoc');\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc('testdoc')\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, q: 'Number 2?', a: []})\n      })\n      docSet.setDoc('testdoc', doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        <button onClick={() => this.addDoc() }>add document</button>\n        {/* <input type=\"text\" value={this.state.docname} onChange={(name) => this.setState({docname: name})} /> */}\n        <button onClick={() => this.deleteDoc()}>delete document</button>\n        <button onClick={() => this.addQ()}>add question</button>\n\n\n        <input id=\"add_document\" autoComplete=\"off\" onChange={(name) => this.setState({docname: toString(name)})}/><button onClick={() => this.handleClik()}>add document</button>\n      \n\n        <pre>Results: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}