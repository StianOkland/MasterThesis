{"ast":null,"code":"import _regeneratorRuntime from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Automerge, { Connection } from 'automerge';\nimport io from 'socket.io-client';\nexport var docSet = new Automerge.DocSet();\nexport var socket = null;\nexport var docarray = [];\nexport default function getConnected(callback) {\n  var _this = this;\n\n  this.socket = io(\"http://localhost:3000\");\n  this.socket.on('data', function (_ref) {\n    var data = _ref.data,\n        name = _ref.name;\n    var doc = docSet.getDoc(name);\n    doc = Automerge.change(doc, function (doc) {\n      doc.chards = ['hei'];\n    });\n    docSet.setDoc(name, doc);\n  });\n  this.socket.on('add doc web', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var title, change, initDoc, changes, doc;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              title = _ref2.title, change = _ref2.change;\n              initDoc = Automerge.change(Automerge.init(), function (doc) {\n                doc.title = title, doc.cards = [];\n              });\n              changes = JSON.parse(change);\n              doc = Automerge.applyChanges(initDoc, changes);\n              docSet.setDoc(title, doc);\n              _this.state.docarray = Array.from(docSet.docs);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  this.socket.on('close', function () {\n    console.log(\"[\".concat(HOST, \":\").concat(PORT, \"] connection closed\"));\n  });\n  this.socket.on('error', function (err) {\n    console.log(\"[\".concat(socket.remoteAddress, \":\").concat(socket.remotePort, \"] error: \").concat(err));\n  });\n  this.socket.on('add card web', /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n      var name, change, doc, changes;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              name = _ref4.name, change = _ref4.change;\n              doc = docSet.getDoc(name);\n              changes = JSON.parse(change);\n              doc2 = Automerge.applyChanges(doc, changes);\n              docSet.setDoc(name, doc2);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n  this.socket.on('add doc new doc', function (_ref6) {\n    var name = _ref6.name,\n        change = _ref6.change;\n    var initDoc = Automerge.init();\n    var doc1 = Automerge.change(initDoc, function (doc) {\n      doc.title = name, doc.cards = [];\n    });\n    var changes = JSON.parse(change);\n    var doc = Automerge.applyChanges(doc1, changes);\n    docSet.setDoc(doc.title, doc);\n\n    _this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  });\n  this.socket.on('add doc new card', /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref7) {\n      var name, change, doc, changes, _doc;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              name = _ref7.name, change = _ref7.change;\n              doc = docSet.getDoc(name);\n\n              if (doc) {\n                changes = JSON.parse(change);\n                _doc = Automerge.applyChanges(doc, changes);\n                docSet.setDoc(_doc.title, _doc);\n\n                _this.setState({\n                  docarray: Array.from(docSet.docs)\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n}","map":{"version":3,"sources":["/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/common.js"],"names":["Automerge","Connection","io","docSet","DocSet","socket","docarray","getConnected","callback","on","data","name","doc","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","JSON","parse","applyChanges","state","Array","from","docs","console","log","HOST","PORT","err","remoteAddress","remotePort","doc2","doc1","setState"],"mappings":"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","sourcesContent":["import Automerge, { Connection } from 'automerge'\nimport io from 'socket.io-client'\nexport const docSet = new Automerge.DocSet()\n\nexport let socket = null;\nexport let docarray = [];\n\nexport default function getConnected( callback ) {\n    this.socket = io(\"http://localhost:3000\")\n\n    this.socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    this.socket.on('add doc web', async ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        this.state.docarray = Array.from(docSet.docs)\n    })\n\n    this.socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    this.socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    this.socket.on('add card web', async ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    this.socket.on('add doc new doc',  ({name, change}) => {\n        let initDoc = Automerge.init()\n        let doc1 = Automerge.change(initDoc, doc => {doc.title = name, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(doc1, changes)\n        docSet.setDoc(doc.title, doc)\n        this.setState({docarray : Array.from(docSet.docs)})\n    })\n\n    this.socket.on('add doc new card', async ({name, change}) => {\n      const doc = docSet.getDoc(name)\n      if (doc) {\n          let changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(doc2.title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}