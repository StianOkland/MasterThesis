{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nconst docSet = new Automerge.DocSet();\ndocSet.registerHandler((docId, doc) => {\n  console.log(`[${docId}] ${JSON.stringify(doc)}`);\n});\nconst socket = io(\"http://localhost:3000\");\nsocket.on('data', ({\n  data,\n  name\n}) => {\n  let doc = docSet.getDoc(name);\n  doc = Automerge.change(doc, doc => {\n    doc.chards = ['hei'];\n  });\n  docSet.setDoc(name, doc);\n});\nsocket.on('add doc web', ({\n  title,\n  change\n}) => {\n  const initDoc = Automerge.change(Automerge.init(), doc => {\n    doc.title = title, doc.cards = [];\n  });\n  let changes = JSON.parse(change);\n  doc = Automerge.applyChanges(initDoc, changes);\n  docSet.setDoc(title, doc);\n  state.docarray = Array.from(docSet.docs);\n});\nsocket.on('close', () => {\n  console.log(`[${HOST}:${PORT}] connection closed`);\n});\nsocket.on('error', err => {\n  console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n});\nsocket.on('add card web', ({\n  name,\n  change\n}) => {\n  const doc = docSet.getDoc(name);\n  let changes = JSON.parse(change);\n  doc2 = Automerge.applyChanges(doc, changes);\n  docSet.setDoc(name, doc2);\n}); // export default function Index() {\n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n//       </div>\n//     )\n// }\n\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: 'testdoc'\n    };\n  }\n\n  handleClik() {\n    const tmp = this.state.results;\n    tmp.push({\n      'title': this.state.docname\n    });\n    this.setState({\n      results: tmp\n    });\n    this.setState({\n      docname: ''\n    });\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = 'testDoc', doc.cards = [];\n    });\n    docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc');\n\n    if (doc) {\n      docSet.removeDoc('testdoc');\n      console.log('doc deleted: testdoc');\n    }\n\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  addQ() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc('testdoc');\n\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({\n          id: id,\n          q: 'Number 2?',\n          a: []\n        });\n      });\n      docSet.setDoc('testdoc', doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Toohak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Toohak!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addDoc(),\n        children: \"add document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.deleteDoc(),\n        children: \"delete document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addQ(),\n        children: \"add question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"add_document\",\n        autoComplete: \"off\",\n        onChange: name => this.setState({\n          docname: toString(name)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClik(),\n        children: \"delete document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 116\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Results: \", JSON.stringify(this.state.docarray, null, 2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","socket","on","data","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","state","docarray","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","React","uuid","Home","Component","constructor","props","results","docname","handleClik","tmp","push","setState","addDoc","deleteDoc","removeDoc","addQ","id","v4","doc1","q","a","render","toString"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAG,IAAIH,SAAS,CAACI,MAAd,EAAf;AAEAD,MAAM,CAACE,eAAP,CAAuB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAa,IAAGH,KAAM,KAAII,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAoB,EAA9C;AACH,CAFD;AAKA,MAAMK,MAAM,GAAGV,EAAE,CAAC,uBAAD,CAAjB;AAEAU,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkB,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAkB;AAChC,MAAIR,GAAG,GAAGJ,MAAM,CAACa,MAAP,CAAcD,IAAd,CAAV;AACAR,EAAAA,GAAG,GAAGP,SAAS,CAACiB,MAAV,CAAiBV,GAAjB,EAAsBA,GAAG,IAAI;AACjCA,IAAAA,GAAG,CAACW,MAAJ,GAAa,CAAC,KAAD,CAAb;AACD,GAFK,CAAN;AAGAf,EAAAA,MAAM,CAACgB,MAAP,CAAcJ,IAAd,EAAoBR,GAApB;AACH,CAND;AAQAK,MAAM,CAACC,EAAP,CAAU,aAAV,EAAyB,CAAC;AAACO,EAAAA,KAAD;AAAQH,EAAAA;AAAR,CAAD,KAAqB;AAC1C,QAAMI,OAAO,GAAGrB,SAAS,CAACiB,MAAV,CAAiBjB,SAAS,CAACsB,IAAV,EAAjB,EAAmCf,GAAG,IAAI;AAACA,IAAAA,GAAG,CAACa,KAAJ,GAAYA,KAAZ,EAAmBb,GAAG,CAACgB,KAAJ,GAAY,EAA/B;AAAkC,GAA7E,CAAhB;AACA,MAAIC,OAAO,GAAGd,IAAI,CAACe,KAAL,CAAWR,MAAX,CAAd;AAEAV,EAAAA,GAAG,GAAGP,SAAS,CAAC0B,YAAV,CAAuBL,OAAvB,EAAgCG,OAAhC,CAAN;AACArB,EAAAA,MAAM,CAACgB,MAAP,CAAcC,KAAd,EAAqBb,GAArB;AACAoB,EAAAA,KAAK,CAACC,QAAN,GAAiBC,KAAK,CAACC,IAAN,CAAW3B,MAAM,CAAC4B,IAAlB,CAAjB;AACH,CAPD;AASAnB,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,MAAM;AACrBL,EAAAA,OAAO,CAACC,GAAR,CAAa,IAAGuB,IAAK,IAAGC,IAAK,qBAA7B;AACH,CAFD;AAIArB,MAAM,CAACC,EAAP,CAAU,OAAV,EAAoBqB,GAAD,IAAS;AACxB1B,EAAAA,OAAO,CAACC,GAAR,CAAa,IAAGG,MAAM,CAACuB,aAAc,IAAGvB,MAAM,CAACwB,UAAW,YAAWF,GAAI,EAAzE;AACH,CAFD;AAIAtB,MAAM,CAACC,EAAP,CAAU,cAAV,EAA0B,CAAC;AAACE,EAAAA,IAAD;AAAOE,EAAAA;AAAP,CAAD,KAAoB;AAC1C,QAAMV,GAAG,GAAGJ,MAAM,CAACa,MAAP,CAAcD,IAAd,CAAZ;AACA,MAAIS,OAAO,GAAGd,IAAI,CAACe,KAAL,CAAWR,MAAX,CAAd;AACAoB,EAAAA,IAAI,GAAGrC,SAAS,CAAC0B,YAAV,CAAuBnB,GAAvB,EAA4BiB,OAA5B,CAAP;AACArB,EAAAA,MAAM,CAACgB,MAAP,CAAcJ,IAAd,EAAoBsB,IAApB;AACH,CALD,E,CAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,eAAe,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAEhDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKhB,KAAL,GAAa;AACXb,MAAAA,IAAI,EAAE,CAAC;AAAC,gBAAO;AAAR,OAAD,EAAkB;AAAC,gBAAO;AAAR,OAAlB,CADK;AAEX8B,MAAAA,OAAO,EAAE,EAFE;AAGXhB,MAAAA,QAAQ,EAAE,EAHC;AAIXiB,MAAAA,OAAO,EAAC;AAJG,KAAb;AAMD;;AAEDC,EAAAA,UAAU,GAAG;AACX,UAAMC,GAAG,GAAG,KAAKpB,KAAL,CAAWiB,OAAvB;AACAG,IAAAA,GAAG,CAACC,IAAJ,CAAS;AAAC,eAAS,KAAKrB,KAAL,CAAWkB;AAArB,KAAT;AACA,SAAKI,QAAL,CAAc;AAACL,MAAAA,OAAO,EAAGG;AAAX,KAAd;AACA,SAAKE,QAAL,CAAc;AAACJ,MAAAA,OAAO,EAAE;AAAV,KAAd;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,QAAI7B,OAAO,GAAGrB,SAAS,CAACiB,MAAV,CAAiBjB,SAAS,CAACsB,IAAV,EAAjB,EAAmCf,GAAG,IAAI;AAACA,MAAAA,GAAG,CAACa,KAAJ,GAAY,SAAZ,EAAuBb,GAAG,CAACgB,KAAJ,GAAY,EAAnC;AAAsC,KAAjF,CAAd;AACApB,IAAAA,MAAM,CAACgB,MAAP,CAAc,KAAKQ,KAAL,CAAWkB,OAAzB,EAAkCxB,OAAlC;AACA,SAAK4B,QAAL,CAAc;AAACrB,MAAAA,QAAQ,EAAGC,KAAK,CAACC,IAAN,CAAW3B,MAAM,CAAC4B,IAAlB;AAAZ,KAAd;AACD;;AAEDoB,EAAAA,SAAS,GAAG;AACV,QAAI5C,GAAG,GAAGJ,MAAM,CAACa,MAAP,CAAc,SAAd,CAAV;;AACA,QAAIT,GAAJ,EAAS;AACLJ,MAAAA,MAAM,CAACiD,SAAP,CAAiB,SAAjB;AACA5C,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AACD,SAAKwC,QAAL,CAAc;AAACrB,MAAAA,QAAQ,EAAGC,KAAK,CAACC,IAAN,CAAW3B,MAAM,CAAC4B,IAAlB;AAAZ,KAAd;AACD;;AAEDsB,EAAAA,IAAI,GAAG;AACL,QAAIC,EAAE,GAAGf,IAAI,CAACgB,EAAL,EAAT;AACA,QAAIC,IAAI,GAAGrD,MAAM,CAACa,MAAP,CAAc,SAAd,CAAX;;AACA,QAAIwC,IAAJ,EAAU;AACR,UAAInB,IAAI,GAAGrC,SAAS,CAACiB,MAAV,CAAiBuC,IAAjB,EAAuBjD,GAAG,IAAI;AACvCA,QAAAA,GAAG,CAACgB,KAAJ,CAAUyB,IAAV,CAAe;AAACM,UAAAA,EAAE,EAAEA,EAAL;AAASG,UAAAA,CAAC,EAAE,WAAZ;AAAyBC,UAAAA,CAAC,EAAE;AAA5B,SAAf;AACD,OAFU,CAAX;AAGAvD,MAAAA,MAAM,CAACgB,MAAP,CAAc,SAAd,EAAyBkB,IAAzB;AACA,WAAKY,QAAL,CAAc;AAACrB,QAAAA,QAAQ,EAAGC,KAAK,CAACC,IAAN,CAAW3B,MAAM,CAAC4B,IAAlB;AAAZ,OAAd;AAED;AACF;;AAED4B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,IAAD;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKT,MAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAOE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKC,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKE,IAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAWE;AAAO,QAAA,EAAE,EAAC,cAAV;AAAyB,QAAA,YAAY,EAAC,KAAtC;AAA4C,QAAA,QAAQ,EAAGtC,IAAD,IAAU,KAAKkC,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAEe,QAAQ,CAAC7C,IAAD;AAAlB,SAAd;AAAhE;AAAA;AAAA;AAAA;AAAA,cAXF,eAW6G;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAK+B,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAX7G,eAcE;AAAA,gCAAepC,IAAI,CAACC,SAAL,CAAe,KAAKgB,KAAL,CAAWC,QAA1B,EAAoC,IAApC,EAA0C,CAA1C,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAnE+C","sourcesContent":["import Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\nconst socket = io(\"http://localhost:3000\")\n\nsocket.on('data', ({data, name}) => {\n    let doc = docSet.getDoc(name)\n    doc = Automerge.change(doc, doc => {\n      doc.chards = ['hei']\n    })\n    docSet.setDoc(name, doc)\n})\n  \nsocket.on('add doc web', ({title, change}) => {\n    const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n    let changes = JSON.parse(change)\n\n    doc = Automerge.applyChanges(initDoc, changes)\n    docSet.setDoc(title, doc)\n    state.docarray = Array.from(docSet.docs)\n})\n\nsocket.on('close', () => {\n    console.log(`[${HOST}:${PORT}] connection closed`)\n})\n\nsocket.on('error', (err) => {\n    console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n})\n\nsocket.on('add card web', ({name, change}) => {\n    const doc = docSet.getDoc(name)\n    let changes = JSON.parse(change)\n    doc2 = Automerge.applyChanges(doc, changes)\n    docSet.setDoc(name, doc2)\n})\n\n\n\n\n// export default function Index() {\n  \n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n\n        \n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n        \n//       </div>\n//     )\n\n// }\n\nimport React from 'react'\nimport uuid from 'react-native-uuid';\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:'testdoc'\n    }\n  }\n \n  handleClik() {\n    const tmp = this.state.results\n    tmp.push({'title': this.state.docname})\n    this.setState({results : tmp})\n    this.setState({docname: ''})\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'testDoc', doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc')\n    if (doc) {\n        docSet.removeDoc('testdoc')\n        console.log('doc deleted: testdoc');\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc('testdoc')\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, q: 'Number 2?', a: []})\n      })\n      docSet.setDoc('testdoc', doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        <button onClick={() => this.addDoc() }>add document</button>\n        {/* <input type=\"text\" value={this.state.docname} onChange={(name) => this.setState({docname: name})} /> */}\n        <button onClick={() => this.deleteDoc()}>delete document</button>\n        <button onClick={() => this.addQ()}>add question</button>\n\n\n        <input id=\"add_document\" autoComplete=\"off\" onChange={(name) => this.setState({docname: toString(name)})}/><button onClick={() => this.handleClik()}>delete document</button>\n      \n\n        <pre>Results: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}