{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nconst docSet = new Automerge.DocSet();\ndocSet.registerHandler((docId, doc) => {\n  console.log(`[${docId}] ${JSON.stringify(doc)}`);\n});\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:3000\");\n    this.socket.on('data', ({\n      data,\n      name\n    }) => {\n      let doc = docSet.getDoc(name);\n      doc = Automerge.change(doc, doc => {\n        doc.chards = ['hei'];\n      });\n      docSet.setDoc(name, doc);\n    });\n    this.socket.on('add doc web', ({\n      title,\n      change\n    }) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = title, doc.cards = [];\n      });\n      let changes = JSON.parse(change);\n      const doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc(title, doc);\n      this.state.docarray = Array.from(docSet.docs);\n    });\n    this.socket.on('close', () => {\n      console.log(`[${HOST}:${PORT}] connection closed`);\n    });\n    this.socket.on('error', err => {\n      console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n    });\n    this.socket.on('add card web', ({\n      name,\n      change\n    }) => {\n      const doc = docSet.getDoc(name);\n      let changes = JSON.parse(change);\n      doc2 = Automerge.applyChanges(doc, changes);\n      docSet.setDoc(name, doc2);\n    });\n    this.socket.on('add doc new doc', ({\n      name,\n      change\n    }) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = '', doc.cards = [];\n      });\n      let changes = JSON.parse(change);\n      const doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc(doc.title, doc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    });\n    this.socket.on('add doc new card', ({\n      name,\n      change\n    }) => {\n      const doc = docSet.getDoc(toString(name));\n\n      if (doc) {\n        let changes = JSON.parse(change);\n        const doc2 = Automerge.applyChanges(doc, changes);\n        docSet.setDoc(doc2.title, doc2);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n      }\n    });\n  }\n\n  handleClik() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = this.state.docname, doc.cards = [];\n    });\n    docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n    let changes = Automerge.getAllChanges(initDoc);\n    this.socket.emit(\"add doc\", {\n      title: this.state.docname,\n      change: JSON.stringify(changes)\n    });\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = 'testDoc', doc.cards = [];\n    });\n    docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n    let changes = Automerge.getAllChanges(initDoc);\n    this.socket.emit(\"add doc\", {\n      title: this.state.docname,\n      change: JSON.stringify(changes)\n    });\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc');\n\n    if (doc) {\n      docSet.removeDoc('testdoc');\n      console.log('doc deleted: testdoc');\n    }\n\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  addQ() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc('testdoc');\n\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({\n          id: id,\n          q: 'Number 2?',\n          a: []\n        });\n      });\n      docSet.setDoc('testdoc', doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Toohak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Toohak!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addDoc(),\n        children: \"add document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.deleteDoc(),\n        children: \"delete document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addQ(),\n        children: \"add question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Docname:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.docname,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Results: \", JSON.stringify(this.state.docarray, null, 2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","Home","Component","constructor","props","state","data","results","docarray","docname","handleChange","bind","componentDidMount","socket","on","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","setState","toString","handleClik","getAllChanges","emit","addDoc","deleteDoc","removeDoc","addQ","id","v4","doc1","push","q","a","event","value","target","render","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\n\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.socket = io(\"http://localhost:3000\")\n\n    this.socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    this.socket.on('add doc web', ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        this.state.docarray = Array.from(docSet.docs)\n    })\n\n    this.socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    this.socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    this.socket.on('add card web', ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    this.socket.on('add doc new doc', ({name, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = '', doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(doc.title, doc)\n        this.setState({docarray : Array.from(docSet.docs)})\n\n    })\n\n    this.socket.on('add doc new card', ({name, change}) => {\n      const doc = docSet.getDoc(toString(name))\n      if (doc) {\n          let changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(doc2.title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n  }\n\n \n  handleClik() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = this.state.docname, doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n\n    let changes = Automerge.getAllChanges(initDoc)\n\n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'testDoc', doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n\n    let changes = Automerge.getAllChanges(initDoc)\n\n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc')\n    if (doc) {\n        docSet.removeDoc('testdoc')\n        console.log('doc deleted: testdoc');\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc('testdoc')\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, q: 'Number 2?', a: []})\n      })\n      docSet.setDoc('testdoc', doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      \n    }\n  }\n\n  handleChange(event) {    \n    this.setState({value: event.target.value});  \n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        <button onClick={() => this.addDoc() }>add document</button>\n        {/* <input type=\"text\" value={this.state.docname} onChange={(name) => this.setState({docname: name})} /> */}\n        <button onClick={() => this.deleteDoc()}>delete document</button>\n        <button onClick={() => this.addQ()}>add question</button>\n\n\n        {/* <input id=\"add_document\" autoComplete=\"off\" onChange={(name) => this.setState({docname: toString(name)})}/><button onClick={() => this.handleClik()}>add document</button> */}\n        <form onSubmit={this.handleSubmit}>        \n          <label>\n            Docname:\n            <input type=\"text\" value={this.state.docname} onChange={this.handleChange} />  \n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        <pre>Results: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}