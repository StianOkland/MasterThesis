{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nconst docSet = new Automerge.DocSet();\ndocSet.registerHandler((docId, doc) => {\n  console.log(`[${docId}] ${JSON.stringify(doc)}`);\n});\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: 'testdoc'\n    };\n  }\n\n  componentDidMount() {\n    const socket = io(\"http://localhost:3000\");\n    socket.on('data', ({\n      data,\n      name\n    }) => {\n      let doc = docSet.getDoc(name);\n      doc = Automerge.change(doc, doc => {\n        doc.chards = ['hei'];\n      });\n      docSet.setDoc(name, doc);\n    });\n    socket.on('add doc web', ({\n      title,\n      change\n    }) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = 'jhh', doc.cards = [];\n      });\n      let changes = JSON.parse(change);\n      doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc(title, doc);\n      state.docarray = Array.from(docSet.docs);\n    });\n    socket.on('close', () => {\n      console.log(`[${HOST}:${PORT}] connection closed`);\n    });\n    socket.on('error', err => {\n      console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n    });\n    socket.on('add card web', ({\n      name,\n      change\n    }) => {\n      const doc = docSet.getDoc(name);\n      let changes = JSON.parse(change);\n      doc2 = Automerge.applyChanges(doc, changes);\n      docSet.setDoc(name, doc2);\n    });\n    socket.on('add doc new doc', ({\n      name,\n      change\n    }) => {\n      let initDoc = Automerge.change(Automerge.init(), doc => {\n        doc.title = name, doc.cards = [];\n      });\n      let changes = JSON.parse(change);\n      let doc = Automerge.init();\n      doc = Automerge.applyChanges(initDoc, changes);\n      docSet.setDoc('hei', doc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    });\n  }\n\n  handleClik() {\n    const tmp = this.state.results;\n    tmp.push({\n      'title': this.state.docname\n    });\n    this.setState({\n      results: tmp\n    });\n    this.setState({\n      docname: ''\n    });\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {\n      doc.title = 'testDoc', doc.cards = [];\n    });\n    docSet.setDoc(this.state.docname, initDoc);\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc');\n\n    if (doc) {\n      docSet.removeDoc('testdoc');\n      console.log('doc deleted: testdoc');\n    }\n\n    this.setState({\n      docarray: Array.from(docSet.docs)\n    });\n  }\n\n  addQ() {\n    let id = uuid.v4();\n    let doc1 = docSet.getDoc('testdoc');\n\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({\n          id: id,\n          q: 'Number 2?',\n          a: []\n        });\n      });\n      docSet.setDoc('testdoc', doc2);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Toohak\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Toohak!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addDoc(),\n        children: \"add document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.deleteDoc(),\n        children: \"delete document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.addQ(),\n        children: \"add question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"add_document\",\n        autoComplete: \"off\",\n        onChange: name => this.setState({\n          docname: toString(name)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClik(),\n        children: \"delete document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 116\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: [\"Results: \", JSON.stringify(this.state.docarray, null, 2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","Home","Component","constructor","props","state","data","results","docarray","docname","componentDidMount","socket","on","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","setState","handleClik","tmp","push","addDoc","deleteDoc","removeDoc","addQ","id","v4","doc1","q","a","render","toString"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\n\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:'testdoc'\n    }\n  }\n\n\n  componentDidMount() {\n    const socket = io(\"http://localhost:3000\")\n\n    socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    socket.on('add doc web', ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'jhh', doc.cards = []})\n        let changes = JSON.parse(change)\n\n        doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        state.docarray = Array.from(docSet.docs)\n    })\n\n    socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    socket.on('add card web', ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    socket.on('add doc new doc', ({name, change}) => {\n        let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = name, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        let doc = Automerge.init()\n        doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc('hei', doc)\n        this.setState({docarray : Array.from(docSet.docs)})\n\n    })\n  }\n\n \n  handleClik() {\n    const tmp = this.state.results\n    tmp.push({'title': this.state.docname})\n    this.setState({results : tmp})\n    this.setState({docname: ''})\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'testDoc', doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc')\n    if (doc) {\n        docSet.removeDoc('testdoc')\n        console.log('doc deleted: testdoc');\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc('testdoc')\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, q: 'Number 2?', a: []})\n      })\n      docSet.setDoc('testdoc', doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        <button onClick={() => this.addDoc() }>add document</button>\n        {/* <input type=\"text\" value={this.state.docname} onChange={(name) => this.setState({docname: name})} /> */}\n        <button onClick={() => this.deleteDoc()}>delete document</button>\n        <button onClick={() => this.addQ()}>add question</button>\n\n\n        <input id=\"add_document\" autoComplete=\"off\" onChange={(name) => this.setState({docname: toString(name)})}/><button onClick={() => this.handleClik()}>delete document</button>\n      \n\n        <pre>Results: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}