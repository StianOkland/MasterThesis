{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nconst docSet = new Automerge.DocSet();\ndocSet.registerHandler((docId, doc) => {\n  console.log(`[${docId}] ${JSON.stringify(doc)}`);\n});\nconst socket = io(\"http://localhost:3000\");\nsocket.on('data', ({\n  data,\n  name\n}) => {\n  let doc = docSet.getDoc(name);\n  doc = Automerge.change(doc, doc => {\n    doc.chards = ['hei'];\n  });\n  docSet.setDoc(name, doc);\n});\nsocket.on('add doc web', ({\n  title,\n  change\n}) => {\n  const initDoc = Automerge.change(Automerge.init(), doc => {\n    doc.title = title, doc.cards = [];\n  });\n  let changes = JSON.parse(change);\n  doc = Automerge.applyChanges(initDoc, changes);\n  docSet.setDoc(title, doc);\n  state.docarray = Array.from(docSet.docs);\n});\nsocket.on('close', () => {\n  console.log(`[${HOST}:${PORT}] connection closed`);\n});\nsocket.on('error', err => {\n  console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`);\n});\nsocket.on('add card web', ({\n  name,\n  change\n}) => {\n  const doc = docSet.getDoc(name);\n  let changes = JSON.parse(change);\n  doc2 = Automerge.applyChanges(doc, changes);\n  docSet.setDoc(name, doc2);\n}); // export default function Index() {\n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n//       </div>\n//     )\n// }\n\nimport React from 'react';\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Hello World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","socket","on","data","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","state","docarray","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","React","Home","Component","constructor","props","results","render"],"mappings":"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","sourcesContent":["import Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\nconst socket = io(\"http://localhost:3000\")\n\nsocket.on('data', ({data, name}) => {\n    let doc = docSet.getDoc(name)\n    doc = Automerge.change(doc, doc => {\n      doc.chards = ['hei']\n    })\n    docSet.setDoc(name, doc)\n})\n  \nsocket.on('add doc web', ({title, change}) => {\n    const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n    let changes = JSON.parse(change)\n\n    doc = Automerge.applyChanges(initDoc, changes)\n    docSet.setDoc(title, doc)\n    state.docarray = Array.from(docSet.docs)\n})\n\nsocket.on('close', () => {\n    console.log(`[${HOST}:${PORT}] connection closed`)\n})\n\nsocket.on('error', (err) => {\n    console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n})\n\nsocket.on('add card web', ({name, change}) => {\n    const doc = docSet.getDoc(name)\n    let changes = JSON.parse(change)\n    doc2 = Automerge.applyChanges(doc, changes)\n    docSet.setDoc(name, doc2)\n})\n\n\n\n\n// export default function Index() {\n  \n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n\n        \n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n        \n//       </div>\n//     )\n\n// }\n\nimport React from 'react'\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: []\n    }\n  }\n \n  render() {\n    return (\n      <div>Hello World</div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}