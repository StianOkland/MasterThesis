{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ablab/Desktop/MasterThesis/toohak/testweb/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nvar docSet = new Automerge.DocSet();\ndocSet.registerHandler(function (docId, doc) {\n  console.log(\"[\".concat(docId, \"] \").concat(JSON.stringify(doc)));\n});\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      docarray: [],\n      docname: 'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0,\n      socket: null,\n      address: null,\n      isConnected: ''\n    };\n    _this.handleChangeName = _this.handleChangeName.bind(_assertThisInitialized(_this));\n    _this.handleQuestionTitle = _this.handleQuestionTitle.bind(_assertThisInitialized(_this));\n    _this.handleQuestionAnswer = _this.handleQuestionAnswer.bind(_assertThisInitialized(_this));\n    _this.handleQuestionNumber = _this.handleQuestionNumber.bind(_assertThisInitialized(_this));\n    _this.addDoc = _this.addDoc.bind(_assertThisInitialized(_this));\n    _this.deleteDoc = _this.deleteDoc.bind(_assertThisInitialized(_this));\n    _this.addQ = _this.addQ.bind(_assertThisInitialized(_this));\n    _this.addA = _this.addA.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      i = Automerge.load('initdoc');\n      docSet.setDoc('init', i);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      this.socket = io(\"http://localhost:3000\");\n      this.socket.on('data', function (_ref) {\n        var data = _ref.data,\n            name = _ref.name;\n        var doc = docSet.getDoc(name);\n        doc = Automerge.change(doc, function (doc) {\n          doc.chards = ['hei'];\n        });\n        docSet.setDoc(name, doc);\n      });\n      this.socket.on('add doc web', /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n          var title, change, initDoc, changes, doc;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  title = _ref2.title, change = _ref2.change;\n                  initDoc = Automerge.change(Automerge.init(), function (doc) {\n                    doc.title = title, doc.cards = [];\n                  });\n                  changes = JSON.parse(change);\n                  doc = Automerge.applyChanges(initDoc, changes);\n                  docSet.setDoc(title, doc);\n                  _this2.state.docarray = Array.from(docSet.docs);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n      this.socket.on('close', function () {\n        console.log(\"[\".concat(HOST, \":\").concat(PORT, \"] connection closed\"));\n      });\n      this.socket.on('error', function (err) {\n        console.log(\"[\".concat(socket.remoteAddress, \":\").concat(socket.remotePort, \"] error: \").concat(err));\n      });\n      this.socket.on('add card web', /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n          var name, change, doc, changes;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  name = _ref4.name, change = _ref4.change;\n                  doc = docSet.getDoc(name);\n                  changes = JSON.parse(change);\n                  doc2 = Automerge.applyChanges(doc, changes);\n                  docSet.setDoc(name, doc2);\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n      this.socket.on('add doc new doc', /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref6) {\n          var title, change, initDoc, changes, doc;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  title = _ref6.title, change = _ref6.change;\n                  initDoc = Automerge.change(Automerge.init(), function (doc) {\n                    doc.title = title, doc.cards = [];\n                  });\n                  changes = JSON.parse(change);\n                  doc = Automerge.applyChanges(initDoc, changes);\n                  docSet.setDoc(title, doc);\n\n                  _this2.setState({\n                    docarray: Array.from(docSet.docs)\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n      this.socket.on('add doc new card', /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref8) {\n          var title, change, doc, changes, _doc;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  title = _ref8.title, change = _ref8.change;\n                  doc = docSet.getDoc(title);\n\n                  if (doc) {\n                    changes = JSON.parse(change);\n                    _doc = Automerge.applyChanges(doc, changes);\n                    docSet.setDoc(title, _doc);\n\n                    _this2.setState({\n                      docarray: Array.from(docSet.docs)\n                    });\n                  }\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref9.apply(this, arguments);\n        };\n      }());\n      this.socket.on('add doc new answer', /*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref10) {\n          var title, change, doc, changes, _doc2;\n\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  title = _ref10.title, change = _ref10.change;\n                  doc = docSet.getDoc(title);\n\n                  if (doc) {\n                    changes = JSON.parse(change);\n                    _doc2 = Automerge.applyChanges(doc, changes);\n                    docSet.setDoc(title, _doc2);\n\n                    _this2.setState({\n                      docarray: Array.from(docSet.docs)\n                    });\n                  }\n\n                case 3:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x5) {\n          return _ref11.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"handleChangeName\",\n    value: function handleChangeName(e) {\n      this.setState({\n        docname: e.target.value\n      });\n    }\n  }, {\n    key: \"handleQuestionTitle\",\n    value: function handleQuestionTitle(e) {\n      this.setState({\n        question: e.target.value\n      });\n    }\n  }, {\n    key: \"handleQuestionAnswer\",\n    value: function handleQuestionAnswer(e) {\n      this.setState({\n        answer: e.target.value\n      });\n    }\n  }, {\n    key: \"handleQuestionNumber\",\n    value: function handleQuestionNumber(e) {\n      this.setState({\n        questionNumber: e.target.value\n      });\n    }\n  }, {\n    key: \"addDoc\",\n    value: function addDoc() {\n      var _this3 = this;\n\n      var initDoc = Automerge.change(Automerge.init(), function (doc) {\n        doc.title = _this3.state.docname, doc.cards = [];\n      });\n      docSet.setDoc(this.state.docname, initDoc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n      Automerge.save(initDoc);\n      var changes = Automerge.getAllChanges(initDoc);\n      this.socket.emit(\"add doc\", {\n        title: this.state.docname,\n        change: JSON.stringify(changes)\n      });\n    }\n  }, {\n    key: \"deleteDoc\",\n    value: function deleteDoc() {\n      var doc = docSet.getDoc(this.state.docname);\n\n      if (doc) {\n        docSet.removeDoc(this.state.docname);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n        this.socket.emit(\"delete doc\", {\n          title: this.state.docname\n        });\n      }\n    }\n  }, {\n    key: \"addQ\",\n    value: function addQ() {\n      var _this4 = this;\n\n      var id = uuid.v4();\n      var doc1 = docSet.getDoc(this.state.docname);\n\n      if (doc1) {\n        var _doc3 = Automerge.change(doc1, function (doc) {\n          doc.cards.push({\n            id: id,\n            Question: _this4.state.question,\n            Answers: []\n          });\n        });\n\n        docSet.setDoc(this.state.docname, _doc3);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n        var changes = Automerge.getAllChanges(_doc3);\n        this.socket.emit(\"add question\", {\n          title: this.state.docname,\n          change: JSON.stringify(changes)\n        });\n      }\n    }\n  }, {\n    key: \"addA\",\n    value: function addA() {\n      var _this5 = this;\n\n      var id = uuid.v4();\n      var doc1 = docSet.getDoc(this.state.docname);\n\n      if (doc1) {\n        var _doc4 = Automerge.change(doc1, function (doc) {\n          doc.cards[_this5.state.questionNumber]['Answers'].push({\n            id: id,\n            a: _this5.state.answer\n          });\n        });\n\n        docSet.setDoc(this.state.docname, _doc4);\n        this.setState({\n          docarray: Array.from(docSet.docs)\n        });\n        var changes = Automerge.getAllChanges(_doc4);\n        this.socket.emit(\"add question\", {\n          title: this.state.docname,\n          change: JSON.stringify(changes)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Toohak\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Toohak!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Add a document: -Title of document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChangeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          onClick: this.addDoc,\n          value: \"Add a new document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Delete document: - Title of document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChangeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          onClick: this.deleteDoc,\n          value: \"Delete a document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Add a question: -Title of document, The question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChangeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleQuestionTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          onClick: this.addQ,\n          value: \"Add a question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Add an answer: -Title of document, Number of the question, The answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleChangeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: this.handleQuestionNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleQuestionAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          onClick: this.addA,\n          value: \"Add an answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: 15\n          },\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"Documents: \", JSON.stringify(this.state.docarray, null, 2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/home/ablab/Desktop/MasterThesis/toohak/testweb/pages/index.js"],"names":["React","uuid","Automerge","init","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","Home","props","state","docarray","docname","question","answer","questionNumber","socket","address","isConnected","handleChangeName","bind","handleQuestionTitle","handleQuestionAnswer","handleQuestionNumber","addDoc","deleteDoc","addQ","addA","i","load","setDoc","setState","Array","from","docs","on","data","name","getDoc","change","chards","title","initDoc","cards","changes","parse","applyChanges","HOST","PORT","err","remoteAddress","remotePort","doc2","e","target","value","save","getAllChanges","emit","removeDoc","id","v4","doc1","push","Question","Answers","a","fontSize","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport uuid from 'react-native-uuid';\nimport Automerge, { init } from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\n\nconst docSet = new Automerge.DocSet()\n\n\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\n\n\n\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      docarray: [],\n      docname:'testdoc',\n      question: '',\n      answer: '',\n      questionNumber: 0,\n      socket: null,\n      address: null,\n      isConnected: ''\n    }\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleQuestionTitle = this.handleQuestionTitle.bind(this)\n    this.handleQuestionAnswer = this.handleQuestionAnswer.bind(this)\n    this.handleQuestionNumber = this.handleQuestionNumber.bind(this)\n    this.addDoc = this.addDoc.bind(this)\n    this.deleteDoc = this.deleteDoc.bind(this)\n    this.addQ = this.addQ.bind(this)\n    this.addA = this.addA.bind(this)\n  }\n\n\n  componentDidMount() {\n    i = Automerge.load('initdoc')\n    docSet.setDoc('init', i)\n    this.setState({docarray : Array.from(docSet.docs)})\n    \n    this.socket = io(\"http://localhost:3000\")\n\n    this.socket.on('data', ({data, name}) => {\n        let doc = docSet.getDoc(name)\n        doc = Automerge.change(doc, doc => {\n          doc.chards = ['hei']\n        })\n        docSet.setDoc(name, doc)\n    })\n      \n    this.socket.on('add doc web', async ({title, change}) => {\n        const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n        let changes = JSON.parse(change)\n\n        const doc = Automerge.applyChanges(initDoc, changes)\n        docSet.setDoc(title, doc)\n        this.state.docarray = Array.from(docSet.docs)\n    })\n\n    this.socket.on('close', () => {\n        console.log(`[${HOST}:${PORT}] connection closed`)\n    })\n\n    this.socket.on('error', (err) => {\n        console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n    })\n\n    this.socket.on('add card web', async ({name, change}) => {\n        const doc = docSet.getDoc(name)\n        let changes = JSON.parse(change)\n        doc2 = Automerge.applyChanges(doc, changes)\n        docSet.setDoc(name, doc2)\n    })\n\n    this.socket.on('add doc new doc',  async ({title, change}) => {\n      const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n      const changes = JSON.parse(change)\n\n\n      const doc = Automerge.applyChanges(initDoc, changes)\n      docSet.setDoc(title, doc)\n      this.setState({docarray : Array.from(docSet.docs)})\n    })\n\n    this.socket.on('add doc new card', async ({title, change}) => {\n      const doc = docSet.getDoc(title)\n      if (doc) {\n          const changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n\n    this.socket.on('add doc new answer', async ({title, change}) => {\n      const doc = docSet.getDoc(title)\n      if (doc) {\n          const changes = JSON.parse(change)\n          const doc2 = Automerge.applyChanges(doc, changes)\n          docSet.setDoc(title, doc2)\n          this.setState({docarray : Array.from(docSet.docs)})\n      }\n    })\n  }\n\n\n  handleChangeName(e) {\n    this.setState({docname: e.target.value})\n  }\n  handleQuestionTitle(e) {\n    this.setState({question: e.target.value})\n  }\n  handleQuestionAnswer(e) {\n    this.setState({answer: e.target.value})\n  }\n  handleQuestionNumber(e) {\n    this.setState({questionNumber: e.target.value})\n  }\n  \n  \n  addDoc() {\n    const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = this.state.docname, doc.cards = []})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n\n    Automerge.save(initDoc)\n    \n    const changes = Automerge.getAllChanges(initDoc)\n    \n    this.socket.emit(\"add doc\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n    \n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc(this.state.docname)\n    if (doc) {\n        docSet.removeDoc(this.state.docname)\n        this.setState({docarray : Array.from(docSet.docs)})\n        this.socket.emit(\"delete doc\", ({title: this.state.docname}))\n    }\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      const doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, Question: this.state.question, Answers: []})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      const changes = Automerge.getAllChanges(doc2)\n\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  addA() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.docname)\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards[this.state.questionNumber]['Answers'].push({id: id, a: this.state.answer})\n      })\n      docSet.setDoc(this.state.docname, doc2)\n      this.setState({docarray : Array.from(docSet.docs)})\n      const changes = Automerge.getAllChanges(doc2)\n\n      this.socket.emit(\"add question\", ({title: this.state.docname, change: JSON.stringify(changes)}))\n      \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        \n        <label>\n          Add a document: -Title of document \n        </label>\n        <br/>\n\n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.addDoc}\n          value='Add a new document'\n        />\n        <br/>\n        <label>\n          Delete document: - Title of document \n        </label>\n        <br/>\n\n        <input type='text' onChange={this.handleChangeName}/>\n        <input \n          type='button'\n          onClick={this.deleteDoc}\n          value='Delete a document'\n        />\n        <br/>\n        <label>\n          Add a question: -Title of document, The question\n        </label>\n\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='text' onChange={this.handleQuestionTitle}/>\n        \n        <input \n          type='button'\n          onClick={this.addQ}\n          value='Add a question'\n        />\n        <br/>\n        <label>\n          Add an answer: -Title of document, Number of the question, The answer\n        </label>\n        <br/>\n        <input type='text' onChange={this.handleChangeName}/>\n        <input type='number' onChange={this.handleQuestionNumber}/>\n        <input type='text' onChange={this.handleQuestionAnswer}/>\n\n\n        \n        <input \n          type='button'\n          onClick={this.addA}\n          value='Add an answer'\n        />\n     \n        <div style={{fontSize: 15}}>\n          <pre>Documents: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n\n        </div>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}