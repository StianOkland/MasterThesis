{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ablab/Desktop/toohak/testweb/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/ablab/Desktop/toohak/testweb/pages/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Automerge from 'automerge';\nimport Head from 'next/head';\nimport io from 'socket.io-client';\nvar docSet = new Automerge.DocSet();\ndocSet.registerHandler(function (docId, doc) {\n  console.log(\"[\".concat(docId, \"] \").concat(JSON.stringify(doc)));\n});\nvar socket = io(\"http://localhost:3000\");\nsocket.on('data', function (_ref) {\n  var data = _ref.data,\n      name = _ref.name;\n  var doc = docSet.getDoc(name);\n  doc = Automerge.change(doc, function (doc) {\n    doc.chards = ['hei'];\n  });\n  docSet.setDoc(name, doc);\n});\nsocket.on('add doc web', function (_ref2) {\n  var title = _ref2.title,\n      change = _ref2.change;\n  var initDoc = Automerge.change(Automerge.init(), function (doc) {\n    doc.title = title, doc.cards = [];\n  });\n  var changes = JSON.parse(change);\n  doc = Automerge.applyChanges(initDoc, changes);\n  docSet.setDoc(title, doc);\n  state.docarray = Array.from(docSet.docs);\n});\nsocket.on('close', function () {\n  console.log(\"[\".concat(HOST, \":\").concat(PORT, \"] connection closed\"));\n});\nsocket.on('error', function (err) {\n  console.log(\"[\".concat(socket.remoteAddress, \":\").concat(socket.remotePort, \"] error: \").concat(err));\n});\nsocket.on('add card web', function (_ref3) {\n  var name = _ref3.name,\n      change = _ref3.change;\n  var doc = docSet.getDoc(name);\n  var changes = JSON.parse(change);\n  doc2 = Automerge.applyChanges(doc, changes);\n  docSet.setDoc(name, doc2);\n}); // export default function Index() {\n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n//       </div>\n//     )\n// }\n\nimport React from 'react';\nimport uuid from 'react-native-uuid';\n\nvar Home = /*#__PURE__*/function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: [{\n        \"name\": \"test1\"\n      }, {\n        \"name\": \"test2\"\n      }],\n      results: [],\n      docarray: '',\n      docname: 'testdoc'\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"handleClik\",\n    value: function handleClik() {\n      var tmp = this.state.results;\n      tmp.push({\n        'title': this.state.docname\n      });\n      this.setState({\n        results: tmp\n      });\n      this.setState({\n        docname: ''\n      });\n    }\n  }, {\n    key: \"addDoc\",\n    value: function addDoc() {\n      var initDoc = Automerge.change(Automerge.init(), function (doc) {\n        doc.title = 'testDoc', doc.cards = [{\n          'q': 'what?',\n          'a': 'this is working'\n        }];\n      });\n      docSet.setDoc(this.state.docname, initDoc);\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }, {\n    key: \"deleteDoc\",\n    value: function deleteDoc() {\n      var doc = docSet.getDoc('testdoc');\n\n      if (doc) {\n        docSet.removeDoc('testdoc');\n        console.log('doc deleted: testdoc');\n      }\n\n      this.setState({\n        docarray: Array.from(docSet.docs)\n      });\n    }\n  }, {\n    key: \"addQ\",\n    value: function addQ() {\n      var _this2 = this;\n\n      var id = uuid.v4();\n      var doc1 = docSet.getDoc(this.state.name);\n\n      if (doc1) {\n        var _doc = Automerge.change(doc1, function (doc) {\n          doc.cards.push({\n            id: id,\n            title: _this2.state.title,\n            answers: []\n          });\n        });\n\n        docSet.setDoc(this.state.name, _doc);\n        this.state.cards = Array.from(_doc.cards);\n        this.setState({\n          visible: false\n        });\n        var changes = Automerge.getChanges(doc1, _doc);\n\n        if (socket != null) {\n          socket.emit(\"add card mobile\", {\n            name: this.state.name,\n            change: JSON.stringify(changes)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Toohak\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Toohak!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this3.addDoc();\n          },\n          children: \"add document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this3.deleteDoc();\n          },\n          children: \"delete document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this3.addQ();\n          },\n          children: \"add question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"add_document\",\n          autoComplete: \"off\",\n          onChange: function onChange(name) {\n            return _this3.setState({\n              docname: toString(name)\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: function onClick() {\n            return _this3.handleClik();\n          },\n          children: \"delete document\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 116\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: [\"Results: \", JSON.stringify(this.state.docarray, null, 2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport { Home as default };","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/testweb/pages/index.js"],"names":["Automerge","Head","io","docSet","DocSet","registerHandler","docId","doc","console","log","JSON","stringify","socket","on","data","name","getDoc","change","chards","setDoc","title","initDoc","init","cards","changes","parse","applyChanges","state","docarray","Array","from","docs","HOST","PORT","err","remoteAddress","remotePort","doc2","React","uuid","Home","props","results","docname","tmp","push","setState","removeDoc","id","v4","doc1","answers","visible","getChanges","emit","addDoc","deleteDoc","addQ","toString","handleClik","Component"],"mappings":"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","sourcesContent":["import Automerge from 'automerge'\nimport Head from 'next/head'\nimport io from 'socket.io-client'\n\nconst docSet = new Automerge.DocSet()\n\ndocSet.registerHandler((docId, doc) => {\n    console.log(`[${docId}] ${JSON.stringify(doc)}`)\n})\n\n\nconst socket = io(\"http://localhost:3000\")\n\nsocket.on('data', ({data, name}) => {\n    let doc = docSet.getDoc(name)\n    doc = Automerge.change(doc, doc => {\n      doc.chards = ['hei']\n    })\n    docSet.setDoc(name, doc)\n})\n  \nsocket.on('add doc web', ({title, change}) => {\n    const initDoc = Automerge.change(Automerge.init(), doc => {doc.title = title, doc.cards = []})\n    let changes = JSON.parse(change)\n\n    doc = Automerge.applyChanges(initDoc, changes)\n    docSet.setDoc(title, doc)\n    state.docarray = Array.from(docSet.docs)\n})\n\nsocket.on('close', () => {\n    console.log(`[${HOST}:${PORT}] connection closed`)\n})\n\nsocket.on('error', (err) => {\n    console.log(`[${socket.remoteAddress}:${socket.remotePort}] error: ${err}`)\n})\n\nsocket.on('add card web', ({name, change}) => {\n    const doc = docSet.getDoc(name)\n    let changes = JSON.parse(change)\n    doc2 = Automerge.applyChanges(doc, changes)\n    docSet.setDoc(name, doc2)\n})\n\n\n\n\n// export default function Index() {\n  \n//   const data =[{\"name\":\"test1\"},{\"name\":\"test2\"}];\n//   const [results, setResults] = useState()\n\n//     return (\n//       <div>\n//         <Head>\n//           <title>Toohak</title>\n//         </Head>\n//         <h1>Toohak!</h1>\n//         <p>Make a docset and add documents to collaberate with others.</p>\n//         <ul id=\"messages\"></ul>\n//         <form id=\"add\" action=\"\">\n//             <input id=\"add_document\" autoComplete=\"off\" /><button>add document</button>\n//         </form>\n//         <form id=\"delete_doc\" action=\"\">\n//           <input \n//             id=\"delete_document\" autoComplete=\"off\" />\n//             <button onClick={async () => {\n//               setResults(data)\n//           }}>delete document</button>\n//         </form>\n//         <form id=\"add_card\" action=\"\">\n//           <input id=\"docname\" autoComplete=\"off\"/><input id=\"docinput\" autoComplete=\"off\" /><button>Send</button>\n//         </form>\n\n        \n//         <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n        \n//       </div>\n//     )\n\n// }\n\nimport React from 'react'\nimport uuid from 'react-native-uuid';\nexport default class Home extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [{\"name\":\"test1\"},{\"name\":\"test2\"}],\n      results: [],\n      docarray: '',\n      docname:'testdoc'\n    }\n  }\n \n  handleClik() {\n    const tmp = this.state.results\n    tmp.push({'title': this.state.docname})\n    this.setState({results : tmp})\n    this.setState({docname: ''})\n  }\n\n  addDoc() {\n    let initDoc = Automerge.change(Automerge.init(), doc => {doc.title = 'testDoc', doc.cards = [{'q': 'what?', 'a': 'this is working'}]})\n    docSet.setDoc(this.state.docname, initDoc)\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  deleteDoc() {\n    let doc = docSet.getDoc('testdoc')\n    if (doc) {\n        docSet.removeDoc('testdoc')\n        console.log('doc deleted: testdoc');\n    }\n    this.setState({docarray : Array.from(docSet.docs)})\n  }\n\n  addQ() {\n    let id = uuid.v4()\n    let doc1 = docSet.getDoc(this.state.name)\n    if (doc1) {\n      let doc2 = Automerge.change(doc1, doc => {\n        doc.cards.push({id: id, title: this.state.title, answers: []})\n      })\n      docSet.setDoc(this.state.name, doc2)\n      this.state.cards = Array.from(doc2.cards)\n      this.setState({visible: false})\n\n      let changes = Automerge.getChanges(doc1, doc2)\n\n      if( socket != null ) {\n        socket.emit(\"add card mobile\", ({name: this.state.name, change: JSON.stringify(changes)}))\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Head>\n          <title>Toohak</title>\n        </Head>\n        <h1>Toohak!</h1>\n        <button onClick={() => this.addDoc() }>add document</button>\n        {/* <input type=\"text\" value={this.state.docname} onChange={(name) => this.setState({docname: name})} /> */}\n        <button onClick={() => this.deleteDoc()}>delete document</button>\n        <button onClick={() => this.addQ()}>add question</button>\n\n\n        <input id=\"add_document\" autoComplete=\"off\" onChange={(name) => this.setState({docname: toString(name)})}/><button onClick={() => this.handleClik()}>delete document</button>\n      \n\n        <pre>Results: {JSON.stringify(this.state.docarray, null, 2)}</pre>\n      </div>\n\n    ) \n  }\n}\n"]},"metadata":{},"sourceType":"module"}