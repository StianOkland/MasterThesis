{"ast":null,"code":"var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var Automerge=require('automerge');var Connection=function(){\"use strict\";function Connection(docSet,socket){var _this=this;_classCallCheck(this,Connection);this.automerge=new Automerge.Connection(docSet,function(msg){return _this.sendMsg(msg);});this.socket=socket;this.automerge.open();}_createClass(Connection,[{key:\"receiveData\",value:function receiveData(data){this.automerge.receiveMsg(data);}},{key:\"sendMsg\",value:function sendMsg(msg){if(!this.socket)return;console.log('Sending:',msg);var data=(JSON.stringify(msg),'utf8');this.socket.write(data);}},{key:\"close\",value:function close(){if(!this.socket)return;this.socket.end();this.socket=null;}}]);return Connection;}();module.exports=Connection;","map":{"version":3,"sources":["/home/ablab/Desktop/toohak/mobile/connection.js"],"names":["Automerge","require","Connection","docSet","socket","automerge","msg","sendMsg","open","data","receiveMsg","console","log","JSON","stringify","write","end","module","exports"],"mappings":"oIAAA,GAAMA,CAAAA,SAAS,CAAGC,OAAO,CAAC,WAAD,CAAzB,C,GAEMC,CAAAA,U,yBACJ,oBAAaC,MAAb,CAAqBC,MAArB,CAA6B,iDAC3B,KAAKC,SAAL,CAAiB,GAAIL,CAAAA,SAAS,CAACE,UAAd,CAAyBC,MAAzB,CAAiC,SAAAG,GAAG,QAAI,CAAA,KAAI,CAACC,OAAL,CAAaD,GAAb,CAAJ,EAApC,CAAjB,CACA,KAAKF,MAAL,CAAcA,MAAd,CACA,KAAKC,SAAL,CAAeG,IAAf,GACD,C,kDAED,qBAAaC,IAAb,CAAmB,CACjB,KAAKJ,SAAL,CAAeK,UAAf,CAA0BD,IAA1B,EACD,C,uBAED,iBAASH,GAAT,CAAc,CACZ,GAAI,CAAC,KAAKF,MAAV,CAAkB,OAClBO,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBN,GAAxB,EACA,GAAMG,CAAAA,IAAI,EAAII,IAAI,CAACC,SAAL,CAAeR,GAAf,EAAqB,MAAzB,CAAV,CACA,KAAKF,MAAL,CAAYW,KAAZ,CAAkBN,IAAlB,EACD,C,qBAED,gBAAS,CACP,GAAI,CAAC,KAAKL,MAAV,CAAkB,OAClB,KAAKA,MAAL,CAAYY,GAAZ,GACA,KAAKZ,MAAL,CAAc,IAAd,CACD,C,0BAGHa,MAAM,CAACC,OAAP,CAAiBhB,UAAjB","sourcesContent":["const Automerge = require('automerge')\n\nclass Connection {\n  constructor (docSet, socket) {\n    this.automerge = new Automerge.Connection(docSet, msg => this.sendMsg(msg))\n    this.socket = socket\n    this.automerge.open()\n  }\n\n  receiveData (data) {\n    this.automerge.receiveMsg(data)\n  }\n\n  sendMsg (msg) {\n    if (!this.socket) return\n    console.log('Sending:', msg)\n    const data = (JSON.stringify(msg), 'utf8')\n    this.socket.write(data)\n  }\n\n  close () {\n    if (!this.socket) return\n    this.socket.end()\n    this.socket = null\n  }\n}\n\nmodule.exports = Connection"]},"metadata":{},"sourceType":"script"}